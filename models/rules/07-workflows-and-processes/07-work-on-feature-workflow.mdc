---
description: Strict schema for implementing every new features
globs: 
alwaysApply: false
---
---
description: "Strict schema for implementing every new features"
alwaysApply: true
---

# Feature Development Schema

## Phase 1: Use Case Creation
### 1.1 Create Use Case File (`*.usecase.ts`)
```typescript
// Example: src/modules/auth/application/usecases/login.usecase.ts
type Request = {
    email: string;
    password: string;
};

type Response = {
    token: string;
    user: UserProps;
};

export class LoginUseCase implements Executable<Request, Response> {
    constructor(
        private readonly userRepository: IUserRepository,
        private readonly tokenService: ITokenService,
        private readonly logger: ILogger,
    ) {}

    async execute(request: Request): Promise<Response> {
        // Implementation will come after tests
    }
}
```

### 1.2 Define Interfaces/Types
- Define Request/Response types
- Define any new domain types needed
- Place in appropriate domain/types folder

## Phase 2: Unit Tests Creation (`*.usecase.spec.ts`)
### 2.1 Test Structure
```typescript
// Example: src/modules/auth/application/usecases/login.usecase.spec.ts
describe('Feature: user login', () => {
    let useCase: LoginUseCase;
    let userRepository: InMemoryUserRepository;
    let tokenService: InMemoryTokenService;
    let logger: InMemoryLogger;

    beforeEach(() => {
        // Initialize dependencies
    });

    describe('Scenario: happy path', () => {
        it('should authenticate user and return token', async () => {
            // Arrange
            // Act
            // Assert
        });
    });

    describe('Scenario: invalid credentials', () => {
        it('should throw authentication error', async () => {
            // Test error cases
        });
    });
});
```

### 2.2 Test Coverage Requirements
- Happy path scenario
- All error cases
- Edge cases
- Authorization/validation

## Phase 3: In-Memory Implementation
### 3.1 Create In-Memory Repositories
```typescript
// Example: src/modules/auth/infrastructure/adapters/in-memory/in-memory-user-repository.ts
export class InMemoryUserRepository implements IUserRepository {
    private users: Map<string, User> = new Map();

    async findByEmail(email: string): Promise<User | null> {
        // Implementation
    }
}
```

### 3.2 Create Mock Services
```typescript
// Example: src/modules/auth/infrastructure/adapters/in-memory/in-memory-token-service.ts
export class InMemoryTokenService implements ITokenService {
    async generate(payload: TokenPayload): Promise<string> {
        // Implementation
    }
}
```

## Phase 4: Controller and Module Setup
### 4.1 Controller Implementation
```typescript
// Example: src/modules/auth/infrastructure/controllers/auth.controller.ts
@Controller('auth')
export class AuthController {
    constructor(private readonly loginUseCase: LoginUseCase) {}

    @Post('login')
    async login(@Body() body: LoginDTO): Promise<LoginResponse> {
        return this.loginUseCase.execute(body);
    }
}
```

### 4.2 Module Configuration
```typescript
// Example: src/modules/auth/auth.module.ts
@Module({
    imports: [/* Required modules */],
    controllers: [AuthController],
    providers: [
        {
            provide: LoginUseCase,
            useFactory: (userRepo, tokenService, logger) => 
                new LoginUseCase(userRepo, tokenService, logger),
            inject: [I_USER_REPOSITORY, I_TOKEN_SERVICE, I_LOGGER],
        },
        // Other providers...
    ],
})
export class AuthModule {}
```

## Phase 5: E2E Testing
### 5.1 Create E2E Test File
```typescript
// Example: src/modules/auth/tests/e2e/login.e2e-spec.ts
describe('Feature: user login E2E', () => {
    let app: TestApp;

    beforeEach(async () => {
        app = new TestApp();
        await app.setup();
        await app.loadFixtures([userSeedsE2E.validUser]);
    });

    afterEach(async () => {
        await app.close();
    });

    describe('Scenario: happy path', () => {
        it('should login successfully', async () => {
            const result = await request(app.getHttpServer())
                .post('/auth/login')
                .send(validPayload);

            expect(result.status).toBe(200);
            expect(result.body).toHaveProperty('token');
        });
    });

    // Additional scenarios...
});
```

### 5.2 Test Requirements
- Full API flow testing
- Database state validation
- Token validation
- Error responses
- Rate limiting (if applicable)

## Development Rules

### ✅ Must Follow
1. Create use case FIRST
2. Write unit tests BEFORE implementation
3. Use in-memory implementations for initial testing
4. Follow naming conventions strictly
5. Implement all required test scenarios
6. Document public interfaces

### ❌ Never
1. Skip test creation
2. Mix implementation and testing phases
3. Use real services in unit tests
4. Leave error cases untested
5. Skip E2E tests

## File Structure Example
```
src/modules/auth/
├── application/
│   └── usecases/
│       ├── login.usecase.ts
│       └── login.usecase.spec.ts
├── infrastructure/
│   ├── adapters/
│   │   └── in-memory/
│   │       ├── in-memory-user-repository.ts
│   │       └── in-memory-token-service.ts
│   └── controllers/
│       └── auth.controller.ts
├── tests/
│   └── e2e/
│       └── login.e2e-spec.ts
└── auth.module.ts
```

