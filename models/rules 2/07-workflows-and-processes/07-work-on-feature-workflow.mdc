---
description: Strict schema for implementing every new features
globs: 
alwaysApply: false
---
---
description: "Workflow for all new features integration"
alwaysApply: true
---

# Feature Implementation Workflow

This document outlines the step-by-step process for implementing a new feature in the Vocalis app following Clean Architecture principles.

## 1. Static Implementation (Presentation Layer)

Start with a static implementation in the presentation layer, focusing on UI and React-specific logic without any external dependencies.

### 1.1 Module Structure

```
modules/
  └── feature-name/
      └── presentation/
          ├── screen/
          │   └── feature.tsx
          └── components/
              ├── component-name/
              │   ├── component-name.tsx
              │   └── use-component-name.view-model.ts
              └── ...
```

### 1.2 Implementation Guidelines

- **Screen Component (`feature.tsx`)**
    - Main page component
    - Only handles layout and composition of components
    - No business logic

```typescript
// Example: public-room.tsx
const PublicRoom = () => {
    return (
        <SafeAreaContainer>
            <PublicRoomWrapper />
        </SafeAreaContainer>
    );
};
```

- **Feature Components (`component-name.tsx`)**
    - Focused on UI/UX
    - Uses a view-model for React-specific logic
    - No direct business logic

```typescript
// Example: public-room-action-bar.tsx
const PublicRoomActionBar = () => {
    const { userIsMuted, onPressMuted } = useActionBarViewModel();

    return (
        <ActionBar>
            <ActionBar.Element onPress={onPressMuted}>
                <Icon name={userIsMuted ? 'microphone-slash' : 'microphone'} />
            </ActionBar.Element>
        </ActionBar>
    );
};
```

- **View Models (`use-component-name.view-model.ts`)**
    - Contains React-specific logic (state, effects, callbacks)
    - Interfaces with business logic through use cases
    - Manages component state and UI interactions

```typescript
// Example: use-action-bar.view-model.ts
const useActionBarViewModel = () => {
    const [isMuted, setIsMuted] = useState(false);

    return {
        userIsMuted: isMuted,
        onPressMuted: () => setIsMuted(!isMuted),
    };
};
```

## 2. Business Logic Implementation (Application Layer)

When user actions require business logic, implement use cases in the application layer.

### 2.1 Use Case Structure

```
modules/
  └── feature-name/
      └── application/
          └── usecases/
              └── feature-action.usecase.ts
```

### 2.2 Implementation Guidelines

- **Use Cases**
    - Orchestrate business logic
    - Pure TypeScript, no framework dependencies
    - Follow SOLID principles
    - Use interfaces from ports layer

```typescript
// Example: create-public-room.usecase.ts
export class CreatePublicRoomUseCase implements Executable<Request, Response> {
    constructor(
        private readonly roomRepository: IRoomsRepository,
        private readonly translator: ITranslator,
    ) {}

    async execute(data: Request): Promise<Response> {
        // Business logic implementation
    }
}
```

## 3. External Services Implementation (Infrastructure Layer)

Implement external service integrations in the infrastructure layer.

### 3.1 Infrastructure Structure

```
modules/
  └── feature-name/
      └── infrastructure/
          ├── repositories/
          │   └── feature.repository.ts
          └── gateways/
              ├── rtk-feature.gateway.ts
              └── rtk-feature-api-client.gateway.ts
```

### 3.2 Implementation Guidelines

- **Repositories**
    - Implement interfaces from ports layer
    - Coordinate with gateways for external communication
    - Handle data transformation

```typescript
// Example: rooms.repository.ts
export class RoomsRepository implements IRoomsRepository {
    constructor(
        private readonly roomsApiClient: IRoomApiClient,
        private readonly roomMapper: IRoomMapper,
    ) {}

    async createPublicRoom(data: DataCreatePublicRoom): Promise<Room> {
        const result = await this.roomsApiClient.createPublicRoom(data);
        return this.roomMapper.toDomain(result);
    }
}
```

- **Gateways**
    - Handle specific external service implementation details
    - For RTK Query, separate endpoint definition from client implementation

```typescript
// Example: rtk-rooms.gateway.ts
export const rtkRoomsGateway = apiStore.injectEndpoints({
    endpoints: (build) => ({
        createPublicRoom: build.mutation<Response, Request>({
            query: (data) => ({
                url: '/rooms',
                method: 'POST',
                body: data,
            }),
        }),
    }),
});
```

## 4. Domain Layer (When Needed)

Implement domain entities and business rules when required.

### 4.1 Domain Structure

```
modules/
  └── feature-name/
      └── domain/
          ├── entities/
          │   └── feature.entity.ts
          └── value-objects/
              └── feature-value.object.ts
```

## 5. Ports Layer (Interfaces)

Define interfaces for all abstractions.

### 5.1 Ports Structure

```
modules/
  └── feature-name/
      └── ports/
          ├── feature-repository.interface.ts
          └── feature-service.interface.ts
```

### 5.2 Implementation Guidelines

- Define interfaces for all dependencies
- Follow Interface Segregation Principle
- Keep interfaces focused and cohesive

```typescript
// Example: rooms-repository.interface.ts
export interface IRoomsRepository {
    createPublicRoom(data: DataCreatePublicRoom): Promise<Room>;
    getRooms(pagination: Pagination, filter: Filter): Promise<RoomsPagination>;
}
```

## 6. Dependency Injection

All dependencies are managed centrally through dependency injection to maintain clean architecture principles and testability.

### 6.1 Dependencies Structure

```
src/
  └── di/
      └── dependencies.tsx
```

### 6.2 Implementation Guidelines

- **Dependencies Provider (`dependencies.tsx`)**
    - Central location for all dependency instantiation
    - Follows the Dependency Inversion Principle
    - Creates instances of all repositories, use cases, and services
    - Provides dependencies through React Context

```typescript
// Example: dependencies.tsx
export const Dependencies = ({ children }: PropsWithChildren) => {
    // Core dependencies
    const reactI18nTranslator = new ReactI18nTranslator(tCommon);
    const exceptionHandler = new ExceptionHandler(reactI18nTranslator);

    // Feature dependencies
    const roomMapper = new RoomMapper();
    const roomsApiClient = new RtkRoomsApiClientGateway();
    const roomRepository = new RoomsRepository(roomsApiClient, roomMapper);

    // Use cases
    const createPublicRoomUseCase = new CreatePublicRoomUseCase(
        roomRepository,
        reactI18nTranslator,
        exceptionHandler
    );

    const values = useMemo(() => ({
        createPublicRoomUseCase,
        // ... other dependencies
    }), []);

    return (
        <DependenciesContext.Provider value={values}>
            {children}
        </DependenciesContext.Provider>
    );
};
```

### 6.3 Using Dependencies in Components

- Use the `useDependencies` hook to access dependencies in components and view models
- Dependencies are strongly typed through the `IDependencies` interface

```typescript
// Example: use-feature.view-model.ts
const useFeatureViewModel = () => {
    const { createPublicRoomUseCase } = useDependencies();

    const handleAction = async () => {
        await createPublicRoomUseCase.execute(data);
    };

    return { handleAction };
};
```

### 6.4 Best Practices

1. **Dependency Registration**

    - Register all dependencies in `dependencies.tsx`
    - Group dependencies by module
    - Initialize dependencies in the correct order
    - Use interfaces for all dependencies

2. **Dependency Usage**

    - Always access dependencies through `useDependencies`
    - Never instantiate dependencies directly in components
    - Keep dependency usage close to where it's needed

3. **Testing**
    - Mock `useDependencies` in tests
    - Provide test implementations of dependencies
    - Test components with different dependency configurations

3. **Code Organization**

    - Maximum 200 lines per file
    - One class/component per file
    - Clear separation of concerns

4. **Naming Conventions**

    - Interfaces: `IFeatureName`
    - Use Cases: `FeatureActionUseCase`
    - Repositories: `FeatureRepository`
    - View Models: `useFeatureViewModel`

5. **Error Handling**
    - Use custom error types
    - Handle errors at appropriate layers
    - Provide meaningful error messages
